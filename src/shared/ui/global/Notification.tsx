import { useAppDispatch, useAppSelector } from '@/app/hooks';
import { AnimatePresence, motion } from 'framer-motion';

import { removeNotification } from '@/shared/state/notification.slice';

// Map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà type ‡∏Å‡∏±‡∏ö‡∏™‡∏µ‡∏Ç‡∏≠‡∏á Tailwind
const typeColors = {
  success: 'bg-green-500 border-green-700',
  error: 'bg-red-500 border-red-700',
  warning: 'bg-yellow-500 border-yellow-700',
  info: 'bg-blue-500 border-blue-700',
};
const NotificationList = () => {
  const dispatch = useAppDispatch();
  // 1. ‡∏î‡∏∂‡∏á notifications ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô array ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  const notifications = useAppSelector(
    (state) => state.notification.notifications,
  );

  return (
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á Notification ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    <div className="fixed top-5 right-5 z-50 flex w-80 flex-col items-end gap-3">
      <AnimatePresence>
        {/* 3. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠ render Notification ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß */}
        {notifications.map((notification) => (
          <motion.div
            key={notification.id}
            layout // üëà ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•
            className={`flex w-full items-center justify-between gap-4 rounded-md border-l-4 p-4 text-white shadow-lg ${typeColors[notification.type]}`}
            initial={{ opacity: 0, y: 20, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, x: 50, transition: { duration: 0.3 } }}
            transition={{ type: 'spring', stiffness: 200, damping: 20 }}
          >
            <div className="flex-grow">
              {/* 1. ‡πÅ‡∏™‡∏î‡∏á title ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
              {notification.title && (
                <strong className="block text-sm font-bold">
                  {notification.title}
                </strong>
              )}
              {/* 2. ‡πÅ‡∏™‡∏î‡∏á message */}
              <span className="block text-sm">{notification.message}</span>
            </div>

            <button
              onClick={() =>
                dispatch(removeNotification({ id: notification.id }))
              } // üëà ‡∏™‡πà‡∏á id ‡πÑ‡∏õ‡πÉ‡∏´‡πâ action
              className="text-xl font-bold opacity-80 hover:opacity-100"
              aria-label="Close notification"
            >
              &times;
            </button>
          </motion.div>
        ))}
      </AnimatePresence>
    </div>
  );
};

export default NotificationList;
